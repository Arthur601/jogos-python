import pygame
import random
import sys

# Inicialização do Pygame
pygame.init()

# Configurações da tela
WIDTH, HEIGHT = 400, 600
SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Flappy Bird Simples")

# Cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
SKY_BLUE = (135, 206, 235)
GREEN = (0, 200, 0)

# Font para score
FONT = pygame.font.SysFont("Arial", 32)

# Frames por segundo
FPS = 60
clock = pygame.time.Clock()

# Variáveis do jogo
gravity = 0.5
bird_movement = 0
bird_x = 50
bird_y = HEIGHT // 2
bird_width = 30
bird_height = 30

pipe_width = 70
pipe_gap = 150
pipe_velocity = 3

# Pipes: lista de dicionários com posição dos canos
pipes = []

# Função para criar novo pipe (par de canos: superior e inferior)
def create_pipe():
    pipe_height = random.randint(100, HEIGHT - pipe_gap - 100)
    top_pipe = pygame.Rect(WIDTH, 0, pipe_width, pipe_height)
    bottom_pipe = pygame.Rect(WIDTH, pipe_height + pipe_gap, pipe_width, HEIGHT - pipe_height - pipe_gap)
    return top_pipe, bottom_pipe

# Adiciona o primeiro par de canos
pipes.extend(create_pipe())

score = 0

game_active = True

# Função para desenhar o pássaro
def draw_bird(x, y):
    pygame.draw.rect(SCREEN, (255, 255, 0), (x, y, bird_width, bird_height))

# Função para desenhar canos
def draw_pipes(pipes_list):
    for pipe in pipes_list:
        pygame.draw.rect(SCREEN, GREEN, pipe)

# Função para mostrar o score
def show_score(score):
    score_surface = FONT.render(f"Score: {score}", True, BLACK)
    SCREEN.blit(score_surface, (10, 10))

# Loop principal do jogo
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and game_active:
                bird_movement = -10
            if event.key == pygame.K_SPACE and not game_active:
                # Reiniciar o jogo
                game_active = True
                pipes.clear()
                pipes.extend(create_pipe())
                bird_y = HEIGHT // 2
                bird_movement = 0
                score = 0

    if game_active:
        # Movimento do pássaro
        bird_movement += gravity
        bird_y += bird_movement

        # Fundo da tela
        SCREEN.fill(SKY_BLUE)

        # Atualizar e desenhar canos
        for pipe in pipes:
            pipe.x -= pipe_velocity

        # Remover canos que saíram da tela
        if pipes[0].right < 0:
            pipes.pop(0)
            pipes.pop(0)
            # Criar novos canos
            pipes.extend(create_pipe())
            score += 1

        draw_pipes(pipes)
        draw_bird(bird_x, bird_y)

        # Checar colisões com canos
        bird_rect = pygame.Rect(bird_x, bird_y, bird_width, bird_height)
        for pipe in pipes:
            if bird_rect.colliderect(pipe):
                game_active = False

        # Checar colisão com chão ou teto
        if bird_y <= 0 or bird_y + bird_height >= HEIGHT:
            game_active = False

        show_score(score)

    else:
        # Tela de game over
        SCREEN.fill(SKY_BLUE)
        game_over_surface = FONT.render("Game Over! Press SPACE to restart", True, BLACK)
        SCREEN.blit(game_over_surface, (20, HEIGHT // 2 - 20))
        show_score(score)

    pygame.display.update()
    clock.tick(FPS)
