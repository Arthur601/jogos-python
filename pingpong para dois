import pygame
import sys

# Inicializa o Pygame
pygame.init()

# Configurações da tela
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Ping Pong - 2 Jogadores")

# Cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Configurações da raquete
PADDLE_WIDTH, PADDLE_HEIGHT = 10, 100
PADDLE_SPEED = 7

# Configurações da bola
BALL_SIZE = 15
BALL_SPEED_X = 5
BALL_SPEED_Y = 5

# Fonte para placar
font = pygame.font.SysFont(None, 50)

# Raquetes (posições iniciais)
paddle1 = pygame.Rect(10, HEIGHT//2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)
paddle2 = pygame.Rect(WIDTH - 20, HEIGHT//2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)

# Bola (posição inicial e velocidade)
ball = pygame.Rect(WIDTH//2 - BALL_SIZE//2, HEIGHT//2 - BALL_SIZE//2, BALL_SIZE, BALL_SIZE)
ball_speed_x = BALL_SPEED_X
ball_speed_y = BALL_SPEED_Y

# Placar
score1 = 0
score2 = 0

clock = pygame.time.Clock()

def draw():
    screen.fill(BLACK)
    # Desenha as raquetes
    pygame.draw.rect(screen, WHITE, paddle1)
    pygame.draw.rect(screen, WHITE, paddle2)
    # Desenha a bola
    pygame.draw.ellipse(screen, WHITE, ball)
    # Desenha o placar
    score_text = font.render(f"{score1} : {score2}", True, WHITE)
    screen.blit(score_text, (WIDTH//2 - score_text.get_width()//2, 20))
    # Atualiza a tela
    pygame.display.flip()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Movimento das raquetes
    keys = pygame.key.get_pressed()
    # Jogador 1 (W e S)
    if keys[pygame.K_w] and paddle1.top > 0:
        paddle1.y -= PADDLE_SPEED
    if keys[pygame.K_s] and paddle1.bottom < HEIGHT:
        paddle1.y += PADDLE_SPEED

    # Jogador 2 (Seta para cima e para baixo)
    if keys[pygame.K_UP] and paddle2.top > 0:
        paddle2.y -= PADDLE_SPEED
    if keys[pygame.K_DOWN] and paddle2.bottom < HEIGHT:
        paddle2.y += PADDLE_SPEED

    # Movimento da bola
    ball.x += ball_speed_x
    ball.y += ball_speed_y

    # Colisão com teto e chão
    if ball.top <= 0 or ball.bottom >= HEIGHT:
        ball_speed_y *= -1

    # Colisão com raquetes
    if ball.colliderect(paddle1) and ball_speed_x < 0:
        ball_speed_x *= -1
    if ball.colliderect(paddle2) and ball_speed_x > 0:
        ball_speed_x *= -1

    # Pontuação
    if ball.left <= 0:
        score2 += 1
        ball.center = (WIDTH//2, HEIGHT//2)
        ball_speed_x *= -1  # Muda direção para o jogador que perdeu marcar

    if ball.right >= WIDTH:
        score1 += 1
        ball.center = (WIDTH//2, HEIGHT//2)
        ball_speed_x *= -1

    draw()
    clock.tick(60)
